package com.example.zerg_pad

import android.Manifest
import android.bluetooth.BluetoothDevice
import android.bluetooth.BluetoothManager
import android.bluetooth.BluetoothSocket
import android.content.Context
import android.content.pm.ActivityInfo
import android.content.pm.PackageManager
import android.os.Build
import android.os.Bundle
import android.util.Log
import android.view.View
import android.view.WindowInsets
import android.view.WindowInsetsController
import android.widget.TextView
import android.widget.Toast
import androidx.activity.ComponentActivity
import androidx.core.app.ActivityCompat
import java.io.IOException
import java.io.OutputStream
import java.util.*
import android.widget.Button
import android.widget.ImageButton
import kotlin.math.cos
import kotlin.math.sin

// üîß –§–ª–∞–≥ –≤–∫–ª—é—á–µ–Ω–∏—è/–æ—Ç–∫–ª—é—á–µ–Ω–∏—è –ª–æ–≥–∞
const val ENABLE_LOG = false

class ControlActivity : ComponentActivity() {
    private var btSocket: BluetoothSocket? = null
    private var outputStream: OutputStream? = null
    private val myuuid: UUID = UUID.fromString("00001101-0000-1000-8000-00805F9B34FB")

    // –õ–æ–≥ ‚Äî –¥–µ–ª–∞–µ–º nullable
    private var logDisplay: TextView? = null

    private lateinit var angleTextView: TextView
    private lateinit var powerTextView: TextView
    private lateinit var directionTextView: TextView
    private lateinit var joystick: ZergJoystickView

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞–¥—Ä–µ—Å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –¥–ª—è –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –ø–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π
    private var deviceAddress: String? = null
    // –§–ª–∞–≥, —É–∫–∞–∑—ã–≤–∞—é—â–∏–π, —á—Ç–æ –º—ã –æ–∂–∏–¥–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–ø—Ä–æ—Å–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π
    private var waitingForPermissions = false

    companion object {
        // –ü–µ—Ä–µ–º–µ—Å—Ç–∏–ª–∏ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—É –≤–Ω—É—Ç—Ä—å companion object
        const val ENABLE_LOG = false

        const val PREFIX_JOYSTICK = 0xFE.toByte()
        const val PREFIX_BUTTON = 0xFF.toByte()
        const val BUTTON_A = 0x01.toByte()
        const val BUTTON_B = 0x02.toByte()
        const val BUTTON_X = 0x03.toByte()
        const val BUTTON_Y = 0x04.toByte()
        const val BUTTON_SELECT = 0x05.toByte()
        const val BUTTON_START = 0x06.toByte()
        const val BUTTON_L = 0x07.toByte()
        const val BUTTON_R = 0x08.toByte()
        const val JOYSTICK_CENTER = 127
        const val PERMISSION_REQUEST_CODE = 101
    }

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        Log.d("BT_Zerg", "ControlActivity started")

        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ–ª–Ω–æ—ç–∫—Ä–∞–Ω–Ω—ã–π —Ä–µ–∂–∏–º
        setFullscreenMode()

        // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Å–ª—É—à–∞—Ç–µ–ª—å –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –ø–æ–ª–Ω–æ—ç–∫—Ä–∞–Ω–Ω—ã–π —Ä–µ–∂–∏–º
        setupSystemUIListener()

        // –§–∏–∫—Å–∞—Ü–∏—è –∞–ª—å–±–æ–º–Ω–æ–π –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏–∏
        requestedOrientation = ActivityInfo.SCREEN_ORIENTATION_LANDSCAPE

        // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–∞–∫–µ—Ç–∞
        setContentView(R.layout.activity_control)

        // –†–∞–±–æ—Ç–∞ —Å –ª–æ–≥–æ–º
        if (!ControlActivity.ENABLE_LOG) {
            findViewById<View>(R.id.log_scroll_view).visibility = View.GONE
        } else {
            logDisplay = findViewById(R.id.log_display)
        }

        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è UI-—ç–ª–µ–º–µ–Ω—Ç–æ–≤
        angleTextView = findViewById(R.id.angleTextView)
        powerTextView = findViewById(R.id.powerTextView)
        directionTextView = findViewById(R.id.directionTextView)
        joystick = findViewById(R.id.joystickView)

        // –ü–æ–ª—É—á–∞–µ–º –∞–¥—Ä–µ—Å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –∏–∑ –∏–Ω—Ç–µ–Ω—Ç–∞
        deviceAddress = intent.getStringExtra("device_address")?.trim()
        Log.d("BT_Zerg", "Received device_address: $deviceAddress")

        if (deviceAddress.isNullOrEmpty()) {
            showToast("–ê–¥—Ä–µ—Å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –Ω–µ –ø–æ–ª—É—á–µ–Ω")
            Log.e("BT_Zerg", "device_address is null or empty")
            finish()
            return
        }

        // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–∂–æ–π—Å—Ç–∏–∫–∞ –∏ –∫–Ω–æ–ø–æ–∫ (–¥–µ–ª–∞–µ–º –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è)
        setupControls()

        // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è, —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ —ç—Ç–æ–≥–æ –ø–æ–¥–∫–ª—é—á–∞–µ–º—Å—è
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.S) {
            if (!checkBluetoothPermissions()) {
                waitingForPermissions = true
                requestBluetoothPermissions()
                // –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –±—É–¥–µ—Ç –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–æ –ø–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π –≤ onRequestPermissionsResult
                return
            }
        }

        // –ï—Å–ª–∏ –≤—Å–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è —É–∂–µ –µ—Å—Ç—å, –ø–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ —É—Å—Ç—Ä–æ–π—Å—Ç–≤—É
        connectToBluetooth()
    }

    // –ù–æ–≤—ã–π –º–µ—Ç–æ–¥ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–æ–ª–Ω–æ—ç–∫—Ä–∞–Ω–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞
    private fun setFullscreenMode() {
        try {
            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.R) {
                // –î–ª—è Android 11 (API 30) –∏ –≤—ã—à–µ
                window.setDecorFitsSystemWindows(false)
                window.insetsController?.let { controller ->
                    // –°–∫—Ä—ã–≤–∞–µ–º –∏ —Å–∏—Å—Ç–µ–º–Ω—É—é –ø–∞–Ω–µ–ª—å –∏ –ø–∞–Ω–µ–ª—å –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
                    controller.hide(WindowInsets.Type.systemBars())
                    // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–æ–≤–µ–¥–µ–Ω–∏—è –ø—Ä–∏ —Å–≤–∞–π–ø–µ - –ø–æ–∫–∞–∑–∞—Ç—å —Å–∏—Å—Ç–µ–º–Ω—ã–µ –ø–∞–Ω–µ–ª–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ
                    controller.systemBarsBehavior = WindowInsetsController.BEHAVIOR_SHOW_TRANSIENT_BARS_BY_SWIPE
                }
            } else {
                // –î–ª—è Android 10 (API 29) –∏ –Ω–∏–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞—Ä—ã–π —Å–ø–æ—Å–æ–±
                @Suppress("DEPRECATION")
                window.decorView.systemUiVisibility = (View.SYSTEM_UI_FLAG_IMMERSIVE_STICKY
                        or View.SYSTEM_UI_FLAG_LAYOUT_STABLE
                        or View.SYSTEM_UI_FLAG_LAYOUT_HIDE_NAVIGATION
                        or View.SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN
                        or View.SYSTEM_UI_FLAG_HIDE_NAVIGATION
                        or View.SYSTEM_UI_FLAG_FULLSCREEN)
            }
        } catch (e: Exception) {
            Log.e("BT_Zerg", "Error setting fullscreen mode: ${e.message}")
        }
    }

    // –ù–æ–≤—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø–æ—è–≤–ª–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º–Ω—ã—Ö UI —ç–ª–µ–º–µ–Ω—Ç–æ–≤
    private fun setupSystemUIListener() {
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.R) {
            // –î–ª—è Android 11 (API 30) –∏ –≤—ã—à–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π WindowInsetsCallback
            val rootView = window.decorView

            rootView.setOnApplyWindowInsetsListener { view, windowInsets ->
                // –ï—Å–ª–∏ —Å–∏—Å—Ç–µ–º–Ω—ã–µ –ø–∞–Ω–µ–ª–∏ —Å—Ç–∞–Ω–æ–≤—è—Ç—Å—è –≤–∏–¥–∏–º—ã–º–∏, —Å–∫—Ä—ã–≤–∞–µ–º –∏—Ö —Å–Ω–æ–≤–∞ —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π
                if (windowInsets.isVisible(WindowInsets.Type.systemBars())) {
                    // –î–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –Ω–µ–º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è, –∑–∞—Ç–µ–º —Å–∫—Ä—ã–≤–∞–µ–º —Å–Ω–æ–≤–∞
                    rootView.postDelayed({
                        setFullscreenMode()
                    }, 3000) // 3 —Å–µ–∫—É–Ω–¥—ã –∑–∞–¥–µ—Ä–∂–∫–∏
                }

                // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º insets –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                view.onApplyWindowInsets(windowInsets)
            }
        } else {
            // –î–ª—è Android 10 (API 29) –∏ –Ω–∏–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞—Ä—ã–π —Å–ø–æ—Å–æ–± —á–µ—Ä–µ–∑ onSystemUiVisibilityChange
            @Suppress("DEPRECATION")
            window.decorView.setOnSystemUiVisibilityChangeListener { visibility ->
                if (visibility and View.SYSTEM_UI_FLAG_FULLSCREEN == 0) {
                    // –°–∏—Å—Ç–µ–º–Ω—ã–µ –ø–∞–Ω–µ–ª–∏ —Å—Ç–∞–ª–∏ –≤–∏–¥–∏–º—ã–º–∏, —Å–∫—Ä—ã–≤–∞–µ–º –∏—Ö —Å–Ω–æ–≤–∞ —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
                    window.decorView.postDelayed({
                        setFullscreenMode()
                    }, 3000)
                }
            }
        }

        // –î–æ–±–∞–≤–ª—è–µ–º —Å–ª—É—à–∞—Ç–µ–ª—å –∫–∞—Å–∞–Ω–∏–π –∫ –∫–æ—Ä–Ω–µ–≤–æ–º—É view
        window.decorView.setOnTouchListener { _, _ ->
            // –í—Å–µ–≥–¥–∞ –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ–ª–Ω–æ—ç–∫—Ä–∞–Ω–Ω—ã–π —Ä–µ–∂–∏–º –ø—Ä–∏ –∫–∞—Å–∞–Ω–∏–∏
            setFullscreenMode()
            false // –ù–µ –ø–æ—Ç—Ä–µ–±–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ –∫–∞—Å–∞–Ω–∏—è
        }
    }

    // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ–ª–Ω–æ—ç–∫—Ä–∞–Ω–Ω—ã–π —Ä–µ–∂–∏–º –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–∏ –∫ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    override fun onResume() {
        super.onResume()
        setFullscreenMode()
    }

    // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ–ª–Ω–æ—ç–∫—Ä–∞–Ω–Ω—ã–π —Ä–µ–∂–∏–º –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ñ–æ–∫—É—Å–∞ –æ–∫–Ω–æ–º
    override fun onWindowFocusChanged(hasFocus: Boolean) {
        super.onWindowFocusChanged(hasFocus)
        if (hasFocus) {
            setFullscreenMode()
        }
    }

    private fun setupControls() {
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–≤–∏–∂–µ–Ω–∏—è –¥–∂–æ–π—Å—Ç–∏–∫–∞
        joystick.setOnJoystickMoveListener({ angle, power, direction ->
            angleTextView.text = getString(R.string.angle_format, angle)
            powerTextView.text = getString(R.string.power_format, power)

            directionTextView.text = when (direction) {
                ZergJoystickView.FRONT -> getString(R.string.front_lab)
                ZergJoystickView.FRONT_RIGHT -> getString(R.string.front_right_lab)
                ZergJoystickView.RIGHT -> getString(R.string.right_lab)
                ZergJoystickView.RIGHT_BOTTOM -> getString(R.string.right_bottom_lab)
                ZergJoystickView.BOTTOM -> getString(R.string.bottom_lab)
                ZergJoystickView.BOTTOM_LEFT -> getString(R.string.bottom_left_lab)
                ZergJoystickView.LEFT -> getString(R.string.left_lab)
                ZergJoystickView.LEFT_FRONT -> getString(R.string.left_front_lab)
                else -> getString(R.string.center_lab)
            }

            sendJoystickCommand(angle, power)
            logToConsole("Joystick: angle=$angle¬∞, power=$power%, direction=${directionTextView.text}")
        }, ZergJoystickView.DEFAULT_LOOP_INTERVAL)

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫
        setupButton(R.id.btn_a, BUTTON_A, "Button A")
        setupButton(R.id.btn_b, BUTTON_B, "Button B")
        setupButton(R.id.btn_x, BUTTON_X, "Button X")
        setupButton(R.id.btn_y, BUTTON_Y, "Button Y")
        setupButtonWithView(R.id.btn_select, BUTTON_SELECT, "SELECT")
        setupButtonWithView(R.id.btn_start, BUTTON_START, "START")
        setupButtonWithView(R.id.btn_left, BUTTON_L, "Left")
        setupButtonWithView(R.id.btn_right, BUTTON_R, "Right")
    }

    private fun setupButton(buttonId: Int, buttonCode: Byte, buttonName: String) {
        findViewById<ImageButton>(buttonId).setOnClickListener {
            sendButtonCommand(buttonCode)
            logToConsole("$buttonName pressed (0x${buttonCode.toInt().and(0xFF).toString(16).uppercase()})")
        }
    }

    private fun setupButtonWithView(buttonId: Int, buttonCode: Byte, buttonName: String) {
        findViewById<Button>(buttonId).setOnClickListener {
            sendButtonCommand(buttonCode)
            logToConsole("$buttonName pressed (0x${buttonCode.toInt().and(0xFF).toString(16).uppercase()})")
        }
    }

    private fun joystickToXY(angle: Int, power: Int): Pair<Int, Int> {
        val radians = Math.toRadians(angle.toDouble())
        val normalizedPower = (power * 127) / 100
        val x = (cos(radians) * normalizedPower + JOYSTICK_CENTER).toInt().coerceIn(0, 255)
        val y = (-sin(radians) * normalizedPower + JOYSTICK_CENTER).toInt().coerceIn(0, 255)
        return Pair(x, y)
    }

    private fun sendJoystickCommand(angle: Int, power: Int) {
        val (x, y) = joystickToXY(angle, power)
        val commands = byteArrayOf(PREFIX_JOYSTICK, x.toByte(), y.toByte())
        sendByteCommands(commands)
        Log.d("BT_Zerg2", "Joystick XY: x=$x, y=$y")
    }

    private fun sendButtonCommand(buttonCode: Byte) {
        val commands = byteArrayOf(PREFIX_BUTTON, buttonCode)
        sendByteCommands(commands)
    }

    private fun logToConsole(message: String) {
        Log.d("BT_Zerg2", message)

        if (ControlActivity.ENABLE_LOG) {
            logDisplay?.let {
                if (it.text.isNotEmpty()) it.append("\n")
                it.append(message)

                findViewById<View>(R.id.log_scroll_view)?.post {
                    findViewById<View>(R.id.log_scroll_view)?.scrollTo(0, it.bottom)
                }
            }
        }
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –≤—Å–µ—Ö –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π Bluetooth
    private fun checkBluetoothPermissions(): Boolean {
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.S) {
            return ActivityCompat.checkSelfPermission(this, Manifest.permission.BLUETOOTH_CONNECT) == PackageManager.PERMISSION_GRANTED &&
                    ActivityCompat.checkSelfPermission(this, Manifest.permission.BLUETOOTH_SCAN) == PackageManager.PERMISSION_GRANTED
        }
        return true
    }

    // –ù–æ–≤—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ Bluetooth —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π –¥–ª—è Android 12+
    private fun requestBluetoothPermissions() {
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.S) {
            val permissions = arrayOf(
                Manifest.permission.BLUETOOTH_SCAN,
                Manifest.permission.BLUETOOTH_CONNECT,
                Manifest.permission.BLUETOOTH_ADVERTISE
            )

            val missingPermissions = permissions.filter {
                ActivityCompat.checkSelfPermission(this, it) != PackageManager.PERMISSION_GRANTED
            }.toTypedArray()

            if (missingPermissions.isNotEmpty()) {
                ActivityCompat.requestPermissions(this, missingPermissions, PERMISSION_REQUEST_CODE)
                Log.d("BT_Zerg", "–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º Bluetooth —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –¥–ª—è Android 12+")
            }
        }
    }

    override fun onRequestPermissionsResult(requestCode: Int, permissions: Array<String>, grantResults: IntArray) {
        super.onRequestPermissionsResult(requestCode, permissions, grantResults)
        if (requestCode == PERMISSION_REQUEST_CODE) {
            waitingForPermissions = false

            if (grantResults.isNotEmpty() && grantResults.all { it == PackageManager.PERMISSION_GRANTED }) {
                Log.d("BT_Zerg", "Bluetooth —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –ø–æ–ª—É—á–µ–Ω—ã")
                // –¢–µ–ø–µ—Ä—å –ø–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ —É—Å—Ç—Ä–æ–π—Å—Ç–≤—É
                connectToBluetooth()
            } else {
                // –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ - –±–µ–∑ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–µ —Å–º–æ–∂–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å
                showToast("–ù–µ–æ–±—Ö–æ–¥–∏–º—ã —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –¥–ª—è —Ä–∞–±–æ—Ç—ã Bluetooth")
                Log.e("BT_Zerg", "Bluetooth —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω—ã")
                // –ù–ï –∑–∞–∫—Ä—ã–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å, –æ—Å—Ç–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —É–≤–∏–¥–µ—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
                // finish() - –∑–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–æ
            }
        }
    }

    private fun connectToBluetooth() {
        try {
            // –ü–æ–ª—É—á–∞–µ–º BluetoothDevice
            val btManager = getSystemService(Context.BLUETOOTH_SERVICE) as? BluetoothManager
            if (btManager == null) {
                showToast("Bluetooth Manager –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
                Log.e("BT_Zerg", "BluetoothManager is null")
                finish()
                return
            }

            val btAdapter = btManager.adapter
            if (btAdapter == null) {
                showToast("–ê–¥–∞–ø—Ç–µ—Ä Bluetooth –Ω–µ –Ω–∞–π–¥–µ–Ω")
                Log.e("BT_Zerg", "BluetoothAdapter is null")
                finish()
                return
            }

            val btDevice = try {
                if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.S &&
                    !checkBluetoothPermissions()
                ) {
                    showToast("–¢—Ä–µ–±—É–µ—Ç—Å—è —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ BLUETOOTH_CONNECT")
                    Log.e("BT_Zerg", "BLUETOOTH_CONNECT permission required")
                    waitingForPermissions = true
                    requestBluetoothPermissions()
                    return
                }
                btAdapter.getRemoteDevice(deviceAddress)
            } catch (e: IllegalArgumentException) {
                Log.e("BT_Zerg", "–û—à–∏–±–∫–∞ getRemoteDevice: ${e.message}")
                showToast("–ê–¥—Ä–µ—Å Bluetooth –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π")
                finish()
                return
            }

            if (btDevice == null) {
                showToast("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å Bluetooth-—É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ")
                Log.e("BT_Zerg", "btDevice is null")
                finish()
                return
            }

            // –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —É—Å—Ç—Ä–æ–π—Å—Ç–≤—É
            connectToDevice(btDevice)
        } catch (e: Exception) {
            Log.e("BT_Zerg", "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ Bluetooth: ${e.message}")
            showToast("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏: ${e.message}")
        }
    }

    private fun connectToDevice(device: BluetoothDevice) {
        try {
            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.S &&
                ActivityCompat.checkSelfPermission(this, Manifest.permission.BLUETOOTH_CONNECT) != PackageManager.PERMISSION_GRANTED
            ) {
                Log.e("BT_Zerg2", "BLUETOOTH_CONNECT permission not granted")
                showToast("–¢—Ä–µ–±—É–µ—Ç—Å—è —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ BLUETOOTH_CONNECT")
                waitingForPermissions = true
                requestBluetoothPermissions()
                return
            }

            logToConsole("Connecting to device: ${device.name}")
            btSocket = device.createRfcommSocketToServiceRecord(myuuid)
            btSocket?.connect()
            outputStream = btSocket?.outputStream
            showToast("Connected to device")
            logToConsole("Connected to device: ${device.name}")
        } catch (e: IOException) {
            Log.e("BT_Zerg2", "Error connecting to device", e)
            showToast("Failed to connect to device: ${e.message}")
            logToConsole("Connection failed: ${e.message}")

            // –ù–µ –¥–µ–ª–∞–µ–º finish() –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–≥ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –ø–æ–ø—ã—Ç–∫—É
            // –ø–æ—Å–ª–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π
            if (e.message?.contains("Connection refused", ignoreCase = true) == true ||
                e.message?.contains("Socket might closed", ignoreCase = true) == true) {
                logToConsole("–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –¥–æ—Å—Ç—É–ø–Ω–æ –∏ Bluetooth –≤–∫–ª—é—á–µ–Ω")
            }
        }
    }

    private fun sendByteCommands(commands: ByteArray) {
        try {
            if (outputStream == null) {
                logToConsole("Bluetooth not connected, can't send commands")
                return
            }

            outputStream?.write(commands)
            val hexValues = commands.joinToString(" ") { "0x${it.toInt().and(0xFF).toString(16).uppercase()}" }
            Log.d("BT_Zerg2", "Commands sent: $hexValues")
        } catch (e: IOException) {
            Log.e("BT_Zerg2", "Error sending commands", e)
            logToConsole("Failed to send commands: ${e.message}")
            showToast("Failed to send commands")

            try {
                logToConsole("Trying to reconnect...")
                btSocket?.close()
                val btManager = getSystemService(Context.BLUETOOTH_SERVICE) as BluetoothManager
                val btAdapter = btManager.adapter

                if (deviceAddress != null) {
                    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.S &&
                        ActivityCompat.checkSelfPermission(this, Manifest.permission.BLUETOOTH_CONNECT) != PackageManager.PERMISSION_GRANTED
                    ) {
                        waitingForPermissions = true
                        requestBluetoothPermissions()
                        return
                    }
                    val device = btAdapter.getRemoteDevice(deviceAddress)
                    connectToDevice(device)
                }
            } catch (e: Exception) {
                Log.e("BT_Zerg2", "Error reconnecting", e)
                logToConsole("Reconnection failed: ${e.message}")
            }
        }
    }

    private fun showToast(message: String) {
        Toast.makeText(this, message, Toast.LENGTH_SHORT).show()
    }

    override fun onDestroy() {
        super.onDestroy()
        try {
            logToConsole("Closing connection")
            outputStream?.close()
            btSocket?.close()
        } catch (e: IOException) {
            Log.e("BT_Zerg2", "Error closing socket", e)
            logToConsole("Error closing connection: ${e.message}")
        }
    }
}